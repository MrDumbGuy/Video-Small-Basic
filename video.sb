'Default values for arguments . Useful for testing after compiling with F5. Loads the Bad Apple!! video at 7.5FPS
frameWidth = 96 'width of video
frameHeight = 72 'height of video
videoText = File.ReadContents(Program.Directory + "\vids\apple.txt") 'Text file where pixels are stored
videoSound = Program.Directory + "\vids\apple.mp3" 'Audio file of the same name
frameRatio = 4 'Display one in x frames
inputFramerate = 30
GraphicsWindow.Title = "apple"

If Program.ArgumentCount >= 1 Then
  If Program.GetArgument(1) = "help" Then 'The new terminal creates a seperate window. Old command prompt displays as a regular message though.
    TextWindow.WriteLine("Syntax: video.exe vname inputFramerate frameRatio")
    TextWindow.WriteLine("For example, video.exe apple 30 4")
    TextWindow.WriteLine("Will load /vids/apple.txt, /vids/apple.mp3, and play the video at 30/4FPS..")
    TextWindow.WriteLine("Press [ENTER] to kill program.")
    TextWindow.PauseWithoutMessage()
    Program.End()
  EndIf
  videoText = File.ReadContents(Program.Directory + "\vids\" + Program.GetArgument(1) + ".txt")
  videoSound = Program.Directory + "\vids\" + Program.GetArgument(1) + ".mp3"
  If Program.GetArgument(1) <> "" Then
    GraphicsWindow.Title = Program.GetArgument(1)
  EndIf
  If Program.GetArgument(2) <> "" Then
    inputFramerate = Program.GetArgument(2)
  EndIf
  If Program.GetArgument(3) <> "" Then
    frameRatio = Program.GetArgument(3)
  EndIf
EndIf

frameCount=Text.GetLength(videoText)/(frameWidth*frameHeight) 'Number of frames = number of pixels / number of pixels per frame
calculatedTargetDelay = Math.Round(1000*frameRatio/inputFramerate) 'Convert the Output FPS into delay in milliseconds.
modifiedTargetDelay = calculatedTargetDelay

'Read all the frames which will be rendered.
For i = 1 To frameCount
  frame[i+(frameRatio-1)] = Text.GetSubText(videoText, frameWidth*frameHeight*(i-1), frameWidth*frameHeight) 'Trust the process.
EndFor

'Set window size for playback.
GraphicsWindow.Title = Program.GetArgument(1)
GraphicsWindow.Width = frameWidth*2
GraphicsWindow.Height = frameHeight*2

'Recreate the shades from the python script.
cols[0] = GraphicsWindow.GetColorFromRGB(0, 0, 0)
For i = 1 To 7
  cols[i] = GraphicsWindow.GetColorFromRGB(32*i-1, 32*i-1, 32*i-1)
EndFor
cols[8] = GraphicsWindow.GetColorFromRGB(255, 255, 255)

Sound.Play(videoSound)
videoStartTime = Clock.ElapsedMilliseconds
For n = 1 To Math.Ceiling(frameCount/frameRatio) '1 to number of frames to be rendered in the video
  
  For y = 1 To frameHeight 'in all vertical lines of this frame
    For x = 1 To frameWidth'in all horizontal lines of this frame
      
      p = Text.GetSubText(frame[n*frameRatio], frameWidth*(y-1)+x, 1) 'get individual pixel within frame
      
      If p <> Text.GetSubText(frame[n*frameRatio], frameWidth*(y-1)+x-1, 1) Then 'If different from previous pixel
        GraphicsWindow.BrushColor = cols[p] 'Update the brush color
      EndIf
      
      If p <> Text.GetSubText(frame[frameRatio*(n-1)], frameWidth*(y-1)+x, 1) Then 'If not the same color as the pixel in the same position in the previous frame
        
        GraphicsWindow.FillRectangle(2*(x-1), 2*(y-1), 2, 2) 'Set pixel as target color
        
      EndIf
      
    EndFor
  EndFor
  
  elapsedTime = Clock.ElapsedMilliseconds - videoStartTime 'Time elapsed since the first frame started to load
  accountedTime = n*calculatedTargetDelay 'Amount of time which the frames loaded so far account for.
  
  If elapsedTime > accountedTime And modifiedTargetDelay >= 0 Then 'If video is behind the audio
    modifiedTargetDelay = modifiedTargetDelay - 14 'Decrease the dynamic delay
  ElseIf elapsedTime < accountedTime And modifiedTargetDelay < calculatedTargetDelay + 14 Then 'If video is ahead of the audio and the delay is not too much (second condition improves overall performance)
    modifiedTargetDelay = modifiedTargetDelay + 14 'Increase the dynamic delay
  EndIf
  
  If modifiedTargetDelay > 0 Then 'Necessary as delaying for negative milliseconds crashes the program.
    Program.Delay(modifiedTargetDelay) 'Delay the video by the optimal amount
  EndIf
  
EndFor

Program.End()
