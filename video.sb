apple = File.ReadContents(Program.Directory + "\apple.txt") 'Make sure the frames are in 96x72 at 30FPS, otherwise, modify the code to suit your needs.

'Specify the format for the decoder
fx=96 'Frame width
fy=72 'Frame height
fc=math.Ceiling(Text.GetLength(apple)/(fx*fy)) 'Number of frames. Calculated automatically now.

qLoss = 3 '(Quality loss) -> Output FPS = 30/qLoss. Input FPS is still assumed to be 30!
targetDelay = 1000*qLoss/30 'Convert the Output FPS into delay in milliseconds.

'Read all the frames which will be rendered.
For i = 1 To fc Step qLoss
  frame[i+(qLoss-1)] = Text.GetSubText(apple, fx*fy*(i-1), fx*fy)'Trust the process.
EndFor

'Set window size for playback.
GraphicsWindow.Width = fx*2
GraphicsWindow.Height = fy*2

'The default of White was just too bright. So, I chose this slightly darker white.
GraphicsWindow.BackgroundColor = GraphicsWindow.GetColorFromRGB(195,195, 195)

'Defining the adjnext variable here so that errors are avoided on the first frame
adjnext = 0

For i = 1 To 8 'Recreate the colors used to detect brightness in the Python script. Compatible with 1.0.0 colors (as in no fatal errors, the colors might be off sometimes)
  cols[i-1] = GraphicsWindow.GetColorFromRGB((32*i)-1, (32*i)-1, (32*i)-1)
EndFor

Sound.Play(Program.Directory + "\apple.mp3")
For n = 1 To Math.Ceiling(fc/qloss) '1 to number of frames (to be rendered) in the video
  t1 = Clock.ElapsedMilliseconds
  For y = 1 To fy 'in all vertical lines of this frame
    For x = 1 To fx 'in all horizontal lines of this frame
      p = Text.GetSubText(frame[n*qLoss], fx*(y-1)+x, 1) 'get individual pixel within frame
      If p<>Text.GetSubText(frame[n*qLoss-qLoss], fx*(y-1)+x, 1) Then 'If not the same color as the pixel in the same position in the previous frame
          col = cols[p] 'Load pre-defined color
          GraphicsWindow.SetPixel(2*(x-1), 2*(y-1), col)'Set pixel as predefined color
      EndIf
    EndFor
  EndFor
  'I have no clue how I made this work, but the following code speeds the video back up to where it's supposed to be if rendering some frames took too long.
  elapsedTime = Clock.ElapsedMilliseconds - t1
  
  adjustment = targetDelay - elapsedTime - adjnext
  
  If adjustment > 0 Then
    Program.Delay(adjustment)
    adjnext = 0
  Else
    adjnext = Math.Abs(adjustment)
  EndIf
EndFor